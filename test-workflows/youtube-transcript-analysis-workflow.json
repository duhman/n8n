{
  "name": "YouTube Video Transcript Analysis & Slack Notification",
  "nodes": [
    {
      "parameters": {
        "url": "=https://www.youtube.com/feeds/videos.xml?channel_id={{$node[\"Channel Config\"].json[\"channel_id\"]}}",
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute",
              "minute": 15
            }
          ]
        }
      },
      "id": "rss-trigger-node",
      "name": "RSS YouTube Channel Monitor",
      "type": "n8n-nodes-base.rssFeedReadTrigger",
      "typeVersion": 1,
      "position": [
        -200,
        300
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "channel_id",
              "value": "UCJ0-OtVpF0wOKEqT2Z1HEtA"
            },
            {
              "name": "slack_user_id",
              "value": "@your-username"
            },
            {
              "name": "analysis_prompt",
              "value": "Please analyze this YouTube video transcript and provide a concise summary including:\n1. Main topic/theme\n2. Key insights or takeaways (3-5 bullet points)\n3. Target audience\n4. Overall sentiment\n\nKeep the summary under 300 words and make it actionable."
            }
          ]
        }
      },
      "id": "channel-config-node",
      "name": "Channel Config",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -400,
        200
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Extract video ID from YouTube RSS feed entry\nconst item = $input.item.json;\nconst videoUrl = item.link || item.guid;\n\n// Extract video ID using regex\nlet videoId = null;\nif (videoUrl) {\n  const match = videoUrl.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/);\n  videoId = match ? match[1] : null;\n}\n\nif (!videoId) {\n  throw new Error('Could not extract video ID from: ' + videoUrl);\n}\n\nreturn {\n  json: {\n    ...item,\n    video_id: videoId,\n    video_url: videoUrl,\n    published_date: item.pubDate || item.published,\n    video_title: item.title\n  }\n};"
      },
      "id": "extract-video-id-node",
      "name": "Extract Video ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        40,
        300
      ]
    },
    {
      "parameters": {
        "url": "=https://youtubetranscript.com/?server_vid2={{$json.video_id}}",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3
          }
        }
      },
      "id": "get-transcript-node",
      "name": "Get Video Transcript",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        300
      ]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list"
        },
        "messages": {
          "messages": [
            {
              "role": "system",
              "content": "=You are a helpful AI assistant that analyzes YouTube video transcripts and provides concise, actionable summaries."
            },
            {
              "role": "user",
              "content": "=Video Title: {{$node[\"Extract Video ID\"].json[\"video_title\"]}}\nVideo URL: {{$node[\"Extract Video ID\"].json[\"video_url\"]}}\nPublished: {{$node[\"Extract Video ID\"].json[\"published_date\"]}}\n\nTranscript:\n{{$json[\"data\"]}}\n\n{{$node[\"Channel Config\"].json[\"analysis_prompt\"]}}"
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 500
        },
        "simplifyOutput": true
      },
      "id": "analyze-transcript-node",
      "name": "Analyze with OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        520,
        300
      ]
    },
    {
      "parameters": {
        "select": "user",
        "user": {
          "mode": "username",
          "value": "={{$node[\"Channel Config\"].json[\"slack_user_id\"]}}"
        },
        "messageType": "block",
        "blocksUi": {
          "blocksValues": [
            {
              "type": "section",
              "textType": "mrkdwn",
              "text": "=ðŸŽ¥ *New YouTube Video Analysis*\n\n*{{$node[\"Extract Video ID\"].json[\"video_title\"]}}*\nðŸ“… Published: {{$node[\"Extract Video ID\"].json[\"published_date\"]}}\nðŸ”— <{{$node[\"Extract Video ID\"].json[\"video_url\"]}}|Watch Video>\n\n---\n\n{{$json[\"message\"]}}"
            },
            {
              "type": "divider"
            },
            {
              "type": "context",
              "elements": [
                {
                  "type": "mrkdwn",
                  "text": "ðŸ¤– _Automated analysis via n8n workflow_"
                }
              ]
            }
          ]
        },
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "send-slack-message-node",
      "name": "Send Slack Summary",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        760,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "transcript-check",
              "leftValue": "={{$json.data}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "transcript-length-check",
              "leftValue": "={{$json.data.length}}",
              "rightValue": 50,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combineOperation": "all"
        },
        "options": {}
      },
      "id": "validate-transcript-node",
      "name": "Validate Transcript",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        400,
        300
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Clean and format the transcript data\nconst rawData = $input.item.json.data || $input.item.json.body || JSON.stringify($input.item.json);\n\n// If the data is a string containing JSON, try to parse it\nlet cleanedTranscript;\ntry {\n  if (typeof rawData === 'string') {\n    // Try to extract transcript from various possible formats\n    if (rawData.includes('[{')) {\n      // Looks like JSON array format\n      const parsed = JSON.parse(rawData.match(/\\[.*\\]/s)?.[0] || '[]');\n      cleanedTranscript = parsed.map(item => item.text || item.transcript || item).join(' ');\n    } else if (rawData.includes('\"text\"')) {\n      // Looks like object with text property\n      const lines = rawData.split('\\n').filter(line => line.includes('\"text\"'));\n      cleanedTranscript = lines.map(line => {\n        const match = line.match(/\"text\"\\s*:\\s*\"([^\"]+)\"/);\n        return match ? match[1] : '';\n      }).filter(text => text).join(' ');\n    } else {\n      // Plain text or HTML\n      cleanedTranscript = rawData.replace(/<[^>]*>/g, ' ').replace(/\\s+/g, ' ').trim();\n    }\n  } else {\n    cleanedTranscript = JSON.stringify(rawData);\n  }\n} catch (error) {\n  cleanedTranscript = String(rawData).replace(/<[^>]*>/g, ' ').replace(/\\s+/g, ' ').trim();\n}\n\n// Ensure we have meaningful content\nif (!cleanedTranscript || cleanedTranscript.length < 50) {\n  throw new Error('Transcript too short or empty: ' + cleanedTranscript);\n}\n\nreturn {\n  json: {\n    ...item,\n    data: cleanedTranscript,\n    transcript_length: cleanedTranscript.length\n  }\n};"
      },
      "id": "clean-transcript-node",
      "name": "Clean Transcript",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        300
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Channel Config": {
      "main": [
        [
          {
            "node": "RSS YouTube Channel Monitor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS YouTube Channel Monitor": {
      "main": [
        [
          {
            "node": "Extract Video ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Video ID": {
      "main": [
        [
          {
            "node": "Clean Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video Transcript": {
      "main": [
        [
          {
            "node": "Validate Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze with OpenAI": {
      "main": [
        [
          {
            "node": "Send Slack Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Transcript": {
      "main": [
        [
          {
            "node": "Analyze with OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean Transcript": {
      "main": [
        [
          {
            "node": "Get Video Transcript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "12345"
  },
  "id": "youtube-transcript-analysis",
  "tags": [
    {
      "createdAt": "2024-06-24T00:00:00.000Z",
      "updatedAt": "2024-06-24T00:00:00.000Z",
      "id": "youtube-automation",
      "name": "YouTube Automation"
    },
    {
      "createdAt": "2024-06-24T00:00:00.000Z",
      "updatedAt": "2024-06-24T00:00:00.000Z",
      "id": "ai-analysis",
      "name": "AI Analysis"
    }
  ]
}